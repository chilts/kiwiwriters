%# ----------------------------------------------------------------------------
<%args>
    $refresh => undef
</%args>
%# ----------------------------------------------------------------------------
<%once>
    use GD;

    my $progress_lhs = GD::Image->new("/usr/share/kiwiwriters/banners/progress-lhs.png");
    my $progress_rhs = GD::Image->new("/usr/share/kiwiwriters/banners/progress-rhs.png");
    my $progress_mid = GD::Image->new("/usr/share/kiwiwriters/banners/progress-mid.png");

    $progress_lhs->transparent( $progress_lhs->colorAllocate(0xfa, 0x90, 0x35) );

    my $allowed = {
        type => {
            winner      => GD::Image->new("/usr/share/kiwiwriters/banners/site-winner-120x90.png"),
            participant => GD::Image->new("/usr/share/kiwiwriters/banners/site-participant-120x90.png"),
            progkiwi    => GD::Image->new("/usr/share/kiwiwriters/banners/progress-kiwi-120x60.png"),
            progworm    => GD::Image->new("/usr/share/kiwiwriters/banners/progress-worm-120x60.png"),
        },
    };

    sub centre {
        my ($str, $total, $char_width) = @_;
        $char_width ||= 6;
        return (($total/2) - (length($str) * $char_width / 2));
    }
</%once>
%# ----------------------------------------------------------------------------
<%init>
    my ($type, $e_name, $username) = $m->dhandler_arg() =~ m{ \A ([\w-]+):([\w-]+)(?::([\w-]+))? \. png \z }xms;

    unless ( exists $allowed->{type}{$type} ) {
        $m->clear_buffer();
        $m->abort(404);
        return;
    }

    # make sure this event exists
    my $model = $ZAAPT->get_model("KiwiWriters::Zaapt::Store::Pg::Challenge");
    my $event = $model->sel_event_using_name({ e_name => $e_name });

    unless ( defined $event ) {
        $m->clear_buffer();
        $m->abort(404);
        return;
    }

    my $image;

    if ( $type eq 'winner' or $type eq 'participant' ) {

        # get the three lines of text
        my @lines = split m{\n}xms, $event->{e_title};

        my $winner = $allowed->{type}{winner};
        my $participant = $allowed->{type}{participant};

        $image = ($type eq 'winner') ? $winner->clone() : $participant->clone();
        my $white = $image->colorAllocate(0,0,0);

        for (my $i = 0; $i < @lines; $i++ ) {
            $image->string(gdSmallFont, 60 - ((length $lines[$i])/2*6), 16+$i*12, $lines[$i], $white);
        }

    }
    elsif ( $type eq 'progkiwi' ) {

        my $model_a = $ZAAPT->get_model("Account");
        my $account = $model_a->sel_account_using_username({ a_username => $username });

        unless ( defined $account ) {
            $m->clear_buffer();
            $m->abort(404);
            return;
        }

        my $status = $model->sel_participant_status({ e_id => $event->{e_id}, a_id => $account->{a_id} });

        unless ( defined $status ) {
            $m->clear_buffer();
            $m->abort(404);
            return;
        }

        my $percentage = int ( $status->{p_progress} / $event->{e_goal} * 100 );
        $percentage = 100 if $percentage > 100;

        $image = $allowed->{type}{progkiwi}->clone();

        my $white = $image->colorAllocate(0,0,0);

        # username
        $image->string(gdTinyFont, centre($username, 90, 5), 35, $username, $white);

        # the bar
        $image->copy($progress_lhs, 9, 45, 0, 0, 5, 10);
        $image->copy($progress_rhs, 14 + 57 * $percentage / 100, 45, 0, 0, 5, 10);
        $image->copyResized($progress_mid, 14, 45, 0, 0, 57 * $percentage / 100, 10, 1, 10);

        # percentage
        if ( $percentage < 50 ) {
            # fix it to the right of the bar
            $image->string(gdTinyFont, 24 + 57 * $percentage / 100, 46, "${percentage}%", $white);
        }
        else {
            # centre it in the middle of the bar
            $image->string(gdTinyFont, centre("${percentage}%", 30 + (57 * $percentage / 100), 5), 46, "${percentage}%", $white);
        }

        my @lines = split m{\n}xms, $event->{e_title};
        for (my $i = 0; $i < @lines; $i++ ) {
            $image->string(gdSmallFont, centre($lines[$i], 90), 2+$i*10, $lines[$i], $white);
        }
    }
    elsif ( $type eq 'progworm' ) {

        my $model_a = $ZAAPT->get_model("Account");
        my $account = $model_a->sel_account_using_username({ a_username => $username });

        unless ( defined $account ) {
            $m->clear_buffer();
            $m->abort(404);
            return;
        }

        my $status = $model->sel_participant_status({ e_id => $event->{e_id}, a_id => $account->{a_id} });

        unless ( defined $status ) {
            $m->clear_buffer();
            $m->abort(404);
            return;
        }

        my $percentage = int ( $status->{p_progress} / $event->{e_goal} * 100 );
        $percentage = 100 if $percentage > 100;

        $image = $allowed->{type}{progworm}->clone();

        my $white = $image->colorAllocate(0,0,0);

        # username
        $image->string(gdTinyFont, centre($username, 158, 5), 35, $username, $white);

        # the bar
        $image->copy($progress_lhs, 44, 45, 0, 0, 5, 10);
        $image->copy($progress_rhs, 49 + 57 * $percentage / 100, 45, 0, 0, 5, 10);
        $image->copyResized($progress_mid, 49, 45, 0, 0, 57 * $percentage / 100, 10, 1, 10);

        # progress
        if ( $percentage < 50 ) {
            # fix it to the right of the bar
            $image->string(gdTinyFont, 59 + 57 * $percentage / 100, 46, $status->{p_progress}, $white);
        }
        else {
            # centre it in the middle of the bar
            $image->string(gdTinyFont, centre($status->{p_progress}, 100 + (57 * $percentage / 100), 5), 46, $status->{p_progress}, $white);
        }

        my @lines = split m{\n}xms, $event->{e_title};
        for (my $i = 0; $i < @lines; $i++ ) {
            $image->string(gdSmallFont, centre($lines[$i], 150), 2+$i*10, $lines[$i], $white);
        }
    }

    $r->content_type('image/png');
    binmode STDOUT;
    print $image->png();

    return;
</%init>
%# ----------------------------------------------------------------------------
